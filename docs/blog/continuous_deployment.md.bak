+++
title = 'You Need Continuous Deployment'
date = 2024-01-15T16:41:15Z
draft = true
+++
<img style="float: left; padding: 10px 10px 10px 13px" src="/img/blog/spitfire.jpg"  width="500" title="Spitfire" alt="Paul Jespers' photo of a Spitfire" >
The Spitfire was the most awesome interceptor of the Second World War. 
<br/>
<br/>
Captured German airmen would routinely lie that they were shot down by a Spitfire rather than any other plane as there was no shame in losing to such a formidable foe. 
<br/>
<br/>
When Field Marshal Hermann GÃ¶ring asked a Luftwaffe general what he could do to help in his battle with the British, the general bitingly replied that he'd like a squadron of their Spitfires.
<br/>
<br/>
And yet the Spitfire did not enter service fully formed. It underwent a process of continual improvement. By the end of the war, it was for example over 130km/h faster than its earlier versions.
<br/>
<br/>
This illustrates that contrary to popular opinion, engineering is generally a gradual process. 
<br/>
<br/>
And this is just as true for data science which is underpinned by data engineering. Models need constant tuning. In the case of an anti-fraud model that I saw one bank deploy, the model would degrade within <i>weeks</i> of its release as the scammers quickly realised what no longer worked and moved quickly on to their next trick. Consequently, the model needed to be constantly retrained and constantly <b>redeployed</b>.
<br/>
<br/>
<img style="float: right; padding: 10px 10px 10px 13px" src="/img/blog/you_need_continuous_deployment.jpg"  width="500" title="Kitchener" alt="Kitchener" >
<blockquote>
"I highly recommend getting a 'hello world' type project working with continuous deployment ... before you proceed directly into a complex ML project when you are learning new technology." - Practical  MLOps, O'Reilly
</blockquote>
Continuous deployment can also identify hard-to-catch bugs in an ML model. Example: we were continuosly deploying to a test environment when we noticed our model's <a href="https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve">area under the curve</a> drop a few percentage points. It wasn't much but enough to make us roll back to a previous Git commit and examine what was wrong. It was a subtle bug that our otherwise robust suite of unit tests did not catch. Without this continuous release process, we'd probably never have found this bug as it degraded performance but not by enough to make us launch a full-scale investigation.
